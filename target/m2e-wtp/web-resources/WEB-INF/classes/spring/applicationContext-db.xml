<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<bean id="propertyConsfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/*.properties</value>
			</list>
		</property>
	</bean>

	<bean id="dataSourceUpdate" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${datasource.write.url}" />
		<property name="username" value="${datasource.write.username}" />
		<property name="password" value="${datasource.write.password}" />
		<property name="initialSize" value="${datasource.initial.size}" />
		<property name="maxActive" value="${datasource.max.size}" />
		<property name="minIdle" value="${datasource.min.idle}" />
		<property name="maxWait" value="60000" />
		<property name="poolPreparedStatements" value="false" />
		<property name="validationQuery" value="${datasource.validation.query}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="removeAbandoned" value="true" />
		<property name="removeAbandonedTimeout" value="1800" />
		<property name="logAbandoned" value="true" />
		<property name="filters" value="stat" />
		<property name="proxyFilters">
			<list>
				<bean class="com.alibaba.druid.filter.logging.Log4jFilter">
					<property name="statementExecutableSqlLogEnable" value="true" />
				</bean>
			</list>
		</property>
	</bean>
	
	<bean id="dataSourceQuery" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${datasource.read.url}" />
		<property name="username" value="${datasource.read.username}" />
		<property name="password" value="${datasource.read.password}" />
		<property name="initialSize" value="${datasource.initial.size}" />
		<property name="maxActive" value="${datasource.max.size}" />
		<property name="minIdle" value="${datasource.min.idle}" />
		<property name="maxWait" value="60000" />
		<property name="poolPreparedStatements" value="false" />
		<property name="validationQuery" value="${datasource.validation.query}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="removeAbandoned" value="true" />
		<property name="removeAbandonedTimeout" value="1800" />
		<property name="logAbandoned" value="true" />
		<property name="filters" value="stat" />
		<property name="proxyFilters">
			<list>
				<bean class="com.alibaba.druid.filter.logging.Log4jFilter">
					<property name="statementExecutableSqlLogEnable" value="true" />
				</bean>
			</list>
		</property>
	</bean>
    
    <bean id="dataSource" class="net.zicp.xiaochangwei.web.multipeDataSource.DataSources">  
        <property name="targetDataSources">  
            <map key-type="java.lang.String">  
                <entry value-ref="dataSourceUpdate" key="UPDATE"></entry>  
                <entry value-ref="dataSourceQuery" key="QUERY"></entry>  
            </map>
        </property>  
        <property name="defaultTargetDataSource" ref="dataSourceUpdate"></property>  
    </bean>


	<!-- 配置SqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:mybatis/Configuration.xml" />
		<!-- mapper配置路径 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:mybatis/*Mapper.xml</value>
			</list>
		</property>
		<property name="plugins">
			<array>
				<bean class="net.zicp.xiaochangwei.web.interceptors.MybatisInterceptor">
					<property name="shardTableName" value="t_feed_back"/>
				</bean>
			</array>
		</property>
	</bean>

	<!-- 通过扫描的模式，所有的mapper都继承SqlMapper接口的接口， 这样一个bean就可以了 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="net.zicp.xiaochangwei.web.dao" />
	</bean>

	<!-- DAPP 配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<!-- 声明试事务管理 -采用annotation方式 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
</beans>